var Utils=function(){var n;return{getData:function(e){n=e},getBarData:function(){var e={labels:[],series:[]},a=[];return n.children.forEach(function(n){e.labels.push(n.name),a.push(n.children.length)}),e.series.push({label:"Projects count",values:a}),e},getStackData:function(){var e={name:"repos",languages:[]};return n.children.forEach(function(n){if("null"!==n.name){var a={language:n.name,count:n.children.length};e.languages.push(a)}}),[e]},getTreeData:function(){return n}}}();
var Searcher=function(){var t,e,r,i,n="",s=[],c={q:"bitcoin",sort:"forks",order:"desc",per_page:100};return{settings:{baseApiUrl:"https://api.github.com/search/repositories"},init:function(){e=d3.select("#search-input"),r=d3.select("#search-btn"),i=d3.select("#search-msg"),t=this.settings.baseApiUrl,r.on("click",function(){!function(){c.q=e.property("value")||"bitcoin";var r=[];for(var s in c)r.push(s+"="+c[s]);n=t+"?"+r.join("&"),console.log(n),i.text("当前搜索地址: "+n)}(),s.forEach(function(t){try{t(n)}catch(t){console.log(t)}})})},addListener:function(t){s.push(t)}}}();
var Bar=function(){function t(){d=[],r=Utils.getBarData(),l=s*r.series.length,function(t){for(var e=0;e<t.labels.length;e++)for(var r=0;r<t.series.length;r++)d.push(t.series[r].values[e])}(r);var t=d3.scale.category20(),e=s*d.length+i*r.labels.length,u=d3.scale.linear().domain([0,d3.max(d)]).range([0,n]),g=d3.scale.linear().range([e+i,0]);a=d3.svg.axis().scale(g).tickFormat("").tickSize(0).orient("left");var h=chart.attr("width",c+n+o).attr("height",e),f=h.selectAll("g").data(d,function(t,e){return[t,e]}),p=f.enter().append("g").attr("transform",function(t,e){return"translate("+c+","+(e*s+i*(.5+Math.floor(e/r.series.length)))+")"});p.append("rect").attr("fill",function(e,a){return t(a%r.series.length)}).attr("class","bar").attr("width",u).attr("height",s-1),p.append("text").attr("x",function(t){return u(t)-3}).attr("y",s/2).attr("fill","red").attr("dy",".35em").text(function(t){return t}),p.append("text").attr("class","label").attr("x",function(t){return-10}).attr("y",l/2).attr("dy",".35em").text(function(t,e){return e%r.series.length==0?r.labels[Math.floor(e/r.series.length)]:""}),f.exit().transition().style({opacity:0}).remove(),h.append("g").attr("class","y axis").attr("transform","translate("+c+", "+-i/2+")").call(a);var x=h.selectAll(".legend").data(r.series),b=x.enter().append("g").attr("transform",function(t,e){return"translate("+(c+n+40-18)+","+(22*e- -i/2)+")"});b.append("rect").attr("width",18).attr("height",18).style("fill",function(e,r){return t(r)}).style("stroke",function(e,r){return t(r)}),b.append("text").attr("class","legend").attr("x",22).attr("y",14).text(function(t){return t.label}),x.exit().remove()}var e,r,a,n=300,s=20,l=0,i=10,c=150,o=150,d=[];return{settings:{title:"barTitle",desc:"barDesc",barId:"#barId"},init:function(){e=this.settings.barId,d3.select("#barTitle").text(this.settings.title),d3.select("#barDesc").text(this.settings.desc),chart=d3.select(e).append("svg").attr("class","chart")},show:function(){t()}}}();
var Treemap=function(){function t(t){return t.watchers_count}function e(t){return t.forks_count}function n(t){var e=c/t.dx,n=s/t.dy;o.domain([t.x,t.x+t.dx]),u.domain([t.y,t.y+t.dy]);var r=i.selectAll("g.cell").transition().duration(d3.event.altKey?7500:750).attr("transform",function(t){return"translate("+o(t.x)+","+u(t.y)+")"});r.select("rect").attr("width",function(t){return e*t.dx-1}).attr("height",function(t){return n*t.dy-1}),r.select("text").attr("x",function(t){return 2*e*t.dx/3+20}).attr("y",function(t){return n*t.dy/2}).style("opacity",function(t){return 1}),f=t,d3.event.stopPropagation()}var r,a,i,c=970,s=500,o=d3.scale.linear().range([0,c]),u=d3.scale.linear().range([0,s]),l=d3.scale.category20c(),d=[],f=[];return{settings:{title:"treemapTitle",desc:"treemapDesc",treemapId:"#treemapId"},init:function(){var t=this.settings.treemapId;d3.select("#treemapTitle").text(this.settings.title),d3.select("#treemapDesc").text(this.settings.desc),r=d3.select(t).append("div").attr("class","chart").style("width",c+"px").style("height",s+"px"),i=r.append("svg").attr("width",c).attr("height",s).append("g").attr("transform","translate(.5,.5)"),a=d3.layout.treemap().size([c,s]).value(function(t){return t.watchers_count})},show:function(r){!function(r){f=d=Utils.getTreeData(r);var c=a.nodes(d).filter(function(t){return!t.children}),s=i.selectAll("g").data(c,function(t){return t.watchers_count}).enter().append("g").attr("class","cell").attr("transform",function(t){return"translate("+t.x+","+t.y+")"}).on("click",function(t){return n(f==t.parent?d:t.parent)});s.append("rect").attr("width",function(t){return t.dx-1}).attr("height",function(t){return t.dy-1}).style("fill",function(t){return l(t.parent.name)}),s.append("text").attr("x",function(t){return 2*t.dx/3+20}).attr("y",function(t){return t.dy/2}).attr("dy",".35em").attr("text-anchor","middle").text(function(t){return t.name}).style("opacity",function(t){return t.w=this.getComputedTextLength(),1}),i.selectAll("g").data(c).exit().transition().style({opacity:0}).remove(),d3.select(window).on("click",function(){n(d)}),d3.select("#treemapSelect").on("change",function(){a.value("watchers"==this.value?t:e).nodes(d),n(f)})}(r)}}}();
!function(){function e(e){var a=setTimeout(function(){t.style.display="block"},300);e=e||"http://localhost:3000/search",d3.json(e,function(e,i){e&&(clearTimeout(a),t.style.display="none",alert("加载数据失败，请检查您的网络设置。")),Utils.getData(i),Bar.show(),Treemap.show(),clearTimeout(a),t.style.display="none"})}var t=document.getElementById("modal");Searcher.init(),Bar.settings={title:"Top100 BarChart",desc:"This is a good example.",barId:"#barId"},Bar.init(),Treemap.settings={title:"Top100 treemap",desc:"You can click the block to zoom it.",treemapId:"#sacdlTreemap"},Treemap.init(),Searcher.addListener(function(t){e(t)}),e()}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
